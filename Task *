//Вступительное задание со звездочкой Реализуйте класс BSTIterator, который представляет итератор по обходу бинарного дерева поиска (BST) в порядке in-order:


using System;
using System.Collections.Generic;

public class TreeNode
{
    public int val;
    public TreeNode? left;
    public TreeNode? right;

    public TreeNode(int x)
    {
        val = x;
        left = null;
        right = null;
    }
}

public class BSTIterator
{
    private Stack<TreeNode> stack;
    private TreeNode current;

    public BSTIterator(TreeNode root)
    {
        stack = new Stack<TreeNode>();
        current = root;
        PushAllLeft(current);
    }

    private void PushAllLeft(TreeNode? node)
    {
        while (node != null)
        {
            stack.Push(node);
            node = node.left;
        }
    }
    public bool HasNext()
    {
        return stack.Count > 0;
    }
    public int Next()
    {
        TreeNode nextNode = stack.Pop();
        PushAllLeft(nextNode.right);
        return nextNode.val;
    }
}
public class Program
{
    static void Main(string[] args)
    {
        TreeNode root = new TreeNode(7);
        root.left = new TreeNode(3);
        root.right = new TreeNode(15);
        root.right.left = new TreeNode(9);
        root.right.right = new TreeNode(20);

        BSTIterator bSTIterator = new BSTIterator(root);

        Console.WriteLine(bSTIterator.Next());    // Вернет 3
        Console.WriteLine(bSTIterator.Next());    // Вернет 7
        Console.WriteLine(bSTIterator.HasNext());  // Вернет true
        Console.WriteLine(bSTIterator.Next());    // Вернет 9
        Console.WriteLine(bSTIterator.HasNext());  // Вернет true
        Console.WriteLine(bSTIterator.Next());    // Вернет 15
        Console.WriteLine(bSTIterator.HasNext());  // Вернет true
        Console.WriteLine(bSTIterator.Next());    // Вернет 20
        Console.WriteLine(bSTIterator.HasNext());  // Вернет false
    }
}
