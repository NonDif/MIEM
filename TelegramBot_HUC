token = '***'

# !pip install gigachat
# !pip install langchain-gigachat langchain-community
# !pip install aiogram
# !pip install nest_asyncio
# import nest_asyncio
# nest_asyncio.apply()
# !pip install aiogram aiosqlite apscheduler

from aiogram import Bot, Dispatcher
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram import Router, F
from aiogram.filters import CommandStart, Command, CommandObject
from aiogram.types import Message
from aiogram.types import KeyboardButton, ReplyKeyboardMarkup, KeyboardButtonPollType
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, WebAppInfo
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.types import BotCommand, BotCommandScopeDefault
from aiogram.types import CallbackQuery
from aiogram.utils.chat_action import ChatActionSender
from aiogram.types import ReplyKeyboardRemove
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from typing import Any, Awaitable, Callable, Dict
from aiogram import BaseMiddleware
from aiogram.types import TelegramObject
from html import escape
import asyncio
import logging
import aiosqlite
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from datetime import datetime

#–û–ø—Ä–µ–¥–µ–ª–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏—è:
class Form(StatesGroup):
    name = State()
    age = State()
    gender = State()
    diabet_type = State()
    like_food = State()
    sugar = State()

#–í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(force=True, level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

bot = Bot(token=token, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher(storage=MemoryStorage())

#listuser = {}

@dp.message(CommandStart(), State(None))
async def cmd_start(message: Message, state: FSMContext):
    async with aiosqlite.connect('users.db') as db:
      async with db.execute("SELECT id FROM users WHERE id = ?", (message.from_user.id,)) as cursor:
        if await cursor.fetchone() is None:
          await cursor.execute("INSERT INTO users (id, name, age, gender, diabet, likefood,statusrem, note, chatgpt) VALUES(?,?,?,?,?,?,?,?,?);", (message.from_user.id, "", 0, "", "", "", True,"",""))
          await db.commit()
          await message.answer(f'–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!')
          await message.answer('–ü–µ—Ä–µ–¥ —Ç–µ–º –∫–∞–∫ –Ω–∞—á–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º, –Ω—É–∂–Ω–æ —Å–æ—Å—Ç–∞–≤–∏—Ç—å –Ω–µ–±–æ–ª—å—à—É—é –∞–Ω–∫–µ—Ç—É –æ –í–∞—Å üòâ')
          await message.answer('‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:')
          await state.set_state(Form.name)
        else:
          await message.answer(f'–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!')
          #–ó–∞–ø—É—Å–∫ –∞–Ω–∫–µ—Ç—ã

@dp.message(F.text, Form.name)
async def input_fio(message: Message, state: FSMContext):
    async with aiosqlite.connect('users.db') as db:
      async with db.execute("SELECT id FROM users WHERE id = ?", (message.from_user.id,)) as cursor:
        if await cursor.fetchone() is None:
          await message.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
          return
    if message.text.isdigit() or len(message.text.split())!=1 or not( 1<=len(message.text)<=30) or message.text[0]=='/':
      await message.answer('‚ùå –í—ã –≤–≤–µ–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ–ø–æ–Ω—è—Ç–Ω–æ–µ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑... –ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ —Å–ª–æ–≤–æ –∏ –±—ã—Ç—å –º–µ–Ω–µ–µ 30 —Å–∏–º–≤–æ–ª–æ–≤!')
      return
    await message.answer(f'–û—Ç–ª–∏—á–Ω–æ, {message.text}! üëç')

    async with aiosqlite.connect("users.db") as db:
      await db.execute(f"UPDATE users SET name = ? WHERE id = ?", (message.text, message.from_user.id))
      await db.commit()
    await state.update_data(PersonName=message.text)
    data = await state.get_data()
#    listuser[message.from_user.id] = {}
#    listuser[message.from_user.id]["Name"] = data['PersonName']
    await message.answer('‚úçÔ∏è –¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç:')
    await state.set_state(Form.age)

@dp.message(F.text,Form.age)
async def input_age(message: Message, state: FSMContext):
    async with aiosqlite.connect('users.db') as db:
      async with db.execute("SELECT id FROM users WHERE id = ?", (message.from_user.id,)) as cursor:
        if await cursor.fetchone() is None:
          await message.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
          return
    if not message.text.isdigit() or not ( 12<=int(message.text)<=120) or len(message.text.split())!=1:
        await message.answer('‚ùå –ü–æ—Ö–æ–∂–µ, —á—Ç–æ –≤—ã –≤–≤–µ–ª–∏ –Ω–µ –≤–æ–∑—Ä–∞—Å—Ç –∏–ª–∏ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç –Ω–µ –≤ —Ä–∞–º–∫–∞—Ö –æ—Ç 12 –¥–æ 120')
        return

    async with aiosqlite.connect("users.db") as db:
      await db.execute(f"UPDATE users SET age = ? WHERE id = ?", (message.text, message.from_user.id))
      await db.commit()
    await state.update_data(Age=message.text)
    data = await state.get_data()
#    listuser[message.from_user.id]["Age"] = data['Age']
    builder = InlineKeyboardBuilder()
    builder.button(text='–ñ–µ–Ω—Å–∫–∏–π üôé‚Äç‚ôÄÔ∏è', callback_data='girl')
    builder.button(text='–ú—É–∂—Å–∫–æ–π üôã‚Äç‚ôÇÔ∏è', callback_data='man')
    builder.adjust(2)
    await message.answer('‚úçÔ∏è –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–π –ø–æ–ª:', reply_markup=builder.as_markup())

@dp.callback_query(F.data.in_(['girl','man']))
async def pick_gender(call: CallbackQuery, state: FSMContext):
    async with aiosqlite.connect('users.db') as db:
      async with db.execute("SELECT id FROM users WHERE id = ?", (call.from_user.id,)) as cursor:
        if await cursor.fetchone() is None:
          await call.message.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
          return
    if call.data == 'girl':
       data = '–∂–µ–Ω—Å–∫–∏–π'
    if call.data == 'man':
       data = '–º—É–∂—Å–∫–æ–π'

    async with aiosqlite.connect("users.db") as db:
      await db.execute(f"UPDATE users SET gender = ? WHERE id = ?", (data, call.from_user.id))
      await db.commit()
#    listuser[call.from_user.id]["Gender"] = data
    await call.message.answer(f'–í–∞—à –≤—ã–±–æ—Ä –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω, –≤—ã –≤—ã–±—Ä–∞–ª–∏ {data} –ø–æ–ª üëÄ')
    await call.message.delete()
    builder = InlineKeyboardBuilder()
    builder.button(text='–î–∏–∞–±–µ—Ç 1-–≥–æ —Ç–∏–ø–∞', callback_data='Diabet_type1')
    builder.button(text='–î–∏–∞–±–µ—Ç 2-–≥–æ —Ç–∏–ø–∞', callback_data='Diabet_type2')
    builder.button(text='–ì–µ—Å—Ç–∞—Ü–∏–æ–Ω–Ω—ã–π –¥–∏–∞–±–µ—Ç', callback_data='Diabet_type3')
    builder.adjust(3)
    await call.message.answer('üëå –û—Å—Ç–∞–ª–æ—Å—å —Å–æ–≤—Å–µ–º –Ω–µ–º–Ω–æ–≥–æ! –°–µ–π—á–∞—Å –Ω—É–∂–Ω–æ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å —Ç–∏–ø –≤–∞—à–µ–≥–æ –¥–∏–∞–±–µ—Ç–∞:', reply_markup=builder.as_markup())


@dp.callback_query(F.data.in_(['Diabet_type1','Diabet_type2','Diabet_type3']))
async def diabet_type(call: CallbackQuery, state: FSMContext):
    async with aiosqlite.connect('users.db') as db:
      async with db.execute("SELECT id FROM users WHERE id = ?", (call.from_user.id,)) as cursor:
        if await cursor.fetchone() is None:
          await call.message.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
          return
    if call.data == 'Diabet_type1':
      data = '1-–π'
    if call.data == 'Diabet_type2':
      data = '2-–π'
    if call.data == 'Diabet_type3':
      data = '–≥–µ—Å—Ç–∞—Ü–∏–æ–Ω–Ω—ã–π'

    async with aiosqlite.connect("users.db") as db:
      await db.execute(f"UPDATE users SET diabet = ? WHERE id = ?", (data, call.from_user.id))
      await db.commit()
#    listuser[call.from_user.id]["Diabet"] = data
    await call.message.answer(f'–í–∞—à –≤—ã–±–æ—Ä –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω, —É –≤–∞—Å {data} —Ç–∏–ø –¥–∏–∞–±–µ—Ç–∞ üëÄ')
    await call.message.delete()
    await call.message.answer('‚òùÔ∏è –ü–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–≥, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞–ø–∏—Å–∞—Ç—å –ª—é–±–∏–º—ã–µ –±–ª—é–¥–∞.\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–ø–∏—Å–∞—Ç—å —Å–≤–æ–π –ø—Ä–µ–¥–ø–æ—á–∏—Ç–µ–º—ã–π —Ä–∞—Ü–∏–æ–Ω –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–º. –≠—Ç–æ –Ω—É–∂–Ω–æ, —á—Ç–æ–±—ã –±–æ—Ç –º–æ–≥ –Ω–∞ –æ—Å–Ω–æ–≤–∞–Ω–∏–∏ –≤–∞—à–∏—Ö –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π —Å–æ–∑–¥–∞–≤–∞—Ç—å –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è –Ω–∞ –¥–µ–Ω—å.\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ—á–∏—Å–ª—è–π—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏—è –±–ª—é–¥ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é.\n\n–ù–∞–ø—Ä–∏–º–µ—Ä: –∫–∞—à–∞, –≥—Ä–µ—á–∫–∞ —Å –º–æ–ª–æ–∫–æ–º, —è–∏—á–Ω–∏—Ü–∞')
    await state.set_state(Form.like_food)

@dp.message(F.text,Form.like_food)
async def input_like_food(message: Message, state: FSMContext):
    async with aiosqlite.connect('users.db') as db:
      async with db.execute("SELECT id FROM users WHERE id = ?", (message.from_user.id,)) as cursor:
        if await cursor.fetchone() is None:
          await message.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
          return
    if not (len(message.text.split(','))>=2):
      await message.answer('‚ùå –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –∫–∞–∫ –º–∏–Ω–∏–º—É–º 2 –±–ª—é–¥–∞')
      return
    data = await state.get_data()
#    name = data['PersonName']
    await message.answer(f'–ù–∞ —ç—Ç–æ–º –∞–Ω–∫–µ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, —Å–ø–∞—Å–∏–±–æ –∑–∞ —É–¥–µ–ª—ë–Ω–Ω–æ–µ –≤—Ä–µ–º—è!\n\n–¢–µ–ø–µ—Ä—å –≤–∞–º –æ—Ç–∫—Ä—ã—Ç–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Ä–∞–∑–≥–æ–≤–∞—Ä–∏–≤–∞—Ç—å —Å –±–æ—Ç–æ–º, –≤—ã –º–æ–∂–µ—Ç–µ –∫–∞–∫ –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã, —Ç–∞–∫ –∏ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –ø—Ä–æ—á–∏–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º —á–µ—Ä–µ–∑ /menu.\n\n–£–¥–∞—á–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è! üåü')
    data = message.text

    async with aiosqlite.connect("users.db") as db:
      await db.execute(f"UPDATE users SET likefood = ? WHERE id = ?", (data, message.from_user.id))
      await db.commit()
#    listuser[message.from_user.id]["LikeFood"] = data
    await state.clear()

@dp.message(Command("help"), State(None))
async def help(message: Message):
    async with aiosqlite.connect('users.db') as db:
      async with db.execute("SELECT id FROM users WHERE id = ?", (message.from_user.id,)) as cursor:
        if await cursor.fetchone() is None:
          await message.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
          return
    await message.answer('–≠—Ç–æ ‚Äî –ò–ò-–±–æ—Ç –¥–ª—è –ø–æ–º–æ—â–∏ –±–æ–ª—å–Ω—ã–º –¥–∏–∞–±–µ—Ç–æ–º. –£ –±–æ—Ç–∞ –µ—Å—Ç—å –º–Ω–æ–∂–µ—Å—Ç–≤–æ —Ñ—É–Ω–∫—Ü–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –≤–∞–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –±—É–¥—É—Ç –ø–æ–ª–µ–∑–Ω—ã! –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –±–æ—Ç–æ–º, –Ω–∞–∂–º–∏—Ç–µ /menu')

@dp.message(Command("menu"), State(None))
async def menu(message: Message):
    async with aiosqlite.connect('users.db') as db:
      async with db.execute("SELECT id FROM users WHERE id = ?", (message.from_user.id,)) as cursor:
        if await cursor.fetchone() is None:
          await message.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
          return
    await message.answer(menu_starttext, reply_markup=menu)

menu_starttext = "üìç –Ø ‚Äî –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç-–¥–∏–∞–±–µ—Ç–æ–ª–æ–≥ —Å –∏—Å–∫—É—Å—Ç–≤–µ–Ω–Ω—ã–º –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–æ–º! –ß–µ–º —è –º–æ–≥—É –≤–∞–º –ø–æ–º–æ—á—å?\n\n–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –æ–¥–Ω—É –∏–∑ –∫–æ–º–∞–Ω–¥ –Ω–∏–∂–µ –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –≤ —á–∞—Ç–µ, —Å–ø—Ä–∞—à–∏–≤–∞–π—Ç–µ –≤—Å—ë, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç!"
menu_buttons = [
    [InlineKeyboardButton(text="–î–∞—Ç—å —Å–æ–≤–µ—Ç –ø–æ –¥–∏–∞–±–µ—Ç—É üìö", callback_data="advice")],
    [InlineKeyboardButton(text="–°–æ—Å—Ç–∞–≤–∏—Ç—å –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è ü•¶", callback_data="plan")],
    [InlineKeyboardButton(text="–î–Ω–µ–≤–Ω–∏–∫ –∑–∞–ø–∏—Å–µ–π üìî", callback_data="note")],
    [InlineKeyboardButton(text="–ú–æ–∏ –¥–∞–Ω–Ω—ã–µ üë§", callback_data="account"),
    InlineKeyboardButton(text="–ü–µ—Ä–µ–ø—Ä–æ–π—Ç–∏ –∞–Ω–∫–µ—Ç—É üìä", callback_data="form")],
    [InlineKeyboardButton(text="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è üîî", callback_data="push")]
]
menu = InlineKeyboardMarkup(inline_keyboard=menu_buttons)

@dp.callback_query(F.data=="push", State(None))
async def status_push(call: CallbackQuery, state: FSMContext):
  async with aiosqlite.connect('users.db') as db:
      async with db.execute("SELECT id FROM users WHERE id = ?", (message.from_user.id,)) as cursor:
        if await cursor.fetchone() is None:
          await message.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
          return
  builder = InlineKeyboardMarkup(inline_keyboard=[
      [InlineKeyboardButton(text="–í–∫–ª—é—á–∏—Ç—åüîî", callback_data="on")],
      [InlineKeyboardButton(text="–í—ã–∫–ª—é—á–∏—Ç—åüîï", callback_data="off")],
      [InlineKeyboardButton(text="–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é‚Ü©Ô∏è", callback_data="menu")]
    ])
  async with aiosqlite.connect('users.db') as db:
      async with db.execute("SELECT id FROM users WHERE id = ?", (call.from_user.id,)) as cursor:
        if await cursor.fetchone() is not None:
          await cursor.execute("SELECT statusrem FROM users WHERE id = ?", (call.from_user.id,))
          statuspush = await cursor.fetchone()

          if statuspush[0]==1:
            await call.message.answer('üìç –í–∞—à —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã" \n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ',reply_markup = builder)
          if statuspush[0]==0:
            await call.message.answer('üìç –í–∞—à —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—ã–∫–ª—é—á–µ–Ω—ã" \n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ',reply_markup = builder)

async def send_msg(dp):
  async with aiosqlite.connect('users.db') as db:
    async with db.execute("SELECT * FROM users WHERE statusrem=1") as cursor:
      async for row in cursor:
        await bot.send_message(chat_id=row[0], text='–ù–µ –∑–∞–±—ã–≤–∞–π—Ç–µ –ø—Ä–æ–≤–µ—Ä—è—Ç—å —É—Ä–æ–≤–µ–Ω—å —Å–∞—Ö–∞—Ä–∞ –≤ –∫—Ä–æ–≤–∏')




@dp.callback_query(F.data=="on", State(None))
async def open_note(call: CallbackQuery, state: FSMContext):
  async with aiosqlite.connect("users.db") as db:
    async with db.execute("SELECT id FROM users WHERE id = ?", (call.from_user.id,)) as cursor:
        if await cursor.fetchone() is None:
          await call.message.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
          return
        await db.execute("UPDATE users SET statusrem = 1 WHERE id = ?", (call.from_user.id, ))
        await db.commit()
        await call.message.answer('–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã!üîî')

@dp.callback_query(F.data=="off", State(None))
async def open_note(call: CallbackQuery, state: FSMContext):
  async with aiosqlite.connect("users.db") as db:
    async with db.execute("SELECT id FROM users WHERE id = ?", (call.from_user.id,)) as cursor:
        if await cursor.fetchone() is None:
          await call.message.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
          return
        await db.execute("UPDATE users SET statusrem = 0 WHERE id = ?", (call.from_user.id, ))
        await db.commit()
        await call.message.answer('–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã!üîï')

@dp.callback_query(F.data=="note", State(None))
async def open_note(call: CallbackQuery, state: FSMContext):
  async with aiosqlite.connect("users.db") as db:
    async with db.execute("SELECT id FROM users WHERE id = ?", (call.from_user.id,)) as cursor:
        if await cursor.fetchone() is None:
          await call.message.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
          return
  builder = InlineKeyboardMarkup(inline_keyboard=[
      [InlineKeyboardButton(text="–°–¥–µ–ª–∞—Ç—å –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å ‚úèÔ∏è", callback_data="record")],
      [InlineKeyboardButton(text="–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –∑–∞–ø–∏—Å–∏ üìù", callback_data="showall")],
      [InlineKeyboardButton(text="–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é ‚Ü©Ô∏è", callback_data="menu")]
    ])
  await call.message.answer('üìç –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',reply_markup = builder)

@dp.callback_query(F.data=="record", State(None))
async def create_daynote(call: CallbackQuery, state: FSMContext):
  async with aiosqlite.connect("users.db") as db:
    async with db.execute("SELECT id FROM users WHERE id = ?", (call.from_user.id,)) as cursor:
        if await cursor.fetchone() is None:
          await call.message.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
          return
  await call.message.answer('–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è —Å–∞—Ö–∞—Ä–∞ –≤ –µ–¥–∏–Ω–∏—Ü–∞—Ö (–º–º–æ–ª—å/–ª):')
  await state.set_state(Form.sugar)

def isfloat(num):
    try:
        float(num)
        return True
    except ValueError:
        return False

@dp.message(F.text,Form.sugar)
async def input_sugar(message: Message, state: FSMContext):
   async with aiosqlite.connect("users.db") as db:
    async with db.execute("SELECT id FROM users WHERE id = ?", (message.from_user.id,)) as cursor:
        if await cursor.fetchone() is None:
          await message.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
          return
    if not isfloat(message.text) or not ( 2.0<=float(message.text)<=30.0) or len(message.text.split())!=1:
        await message.answer('‚ùå –ü–æ—Ö–æ–∂–µ, —á—Ç–æ –≤—ã –≤–≤–µ–ª–∏ —Å–æ–≤—Å–µ–º –Ω–µ —É—Ä–æ–≤–µ–Ω—å —Å–∞—Ö–∞—Ä–∞, –∏–ª–∏ –æ–Ω –Ω–µ –≤ —Ä–∞–º–∫–∞—Ö –æ—Ç 2.0 –¥–æ 30.0 –º–º–æ–ª—å/–ª')
        return
    await state.update_data(Sugar=message.text)
    data = str(message.text)
#    data = await state.get_data()
#    if message.from_user.id in listuser:
#      if not "Notes" in listuser[message.from_user.id]:
#        listuser[message.from_user.id]["Notes"]=[]
    data = "üï∞Ô∏è –í—Ä–µ–º—è: " + str(datetime.now().strftime('%Y-%m-%d %H:%M:%S')) + ", üìå –£—Ä–æ–≤–µ–Ω—å: " + str(data) + " –º–º–æ–ª—å/–ª\n"

    async with aiosqlite.connect("users.db") as db:
      async with db.execute("SELECT id FROM users WHERE id = ?", (message.from_user.id,)) as cursor:
        await cursor.execute("SELECT note FROM users WHERE id = ?", (message.from_user.id,))
        row = await cursor.fetchone()
        if row:
          note = row[0]
      note += str(data)
      print(note)
      await db.execute(f"UPDATE users SET note = ? WHERE id = ?", (note, message.from_user.id))
      await db.commit()
#    listuser[message.from_user.id]["Notes"].append([datetime.now().strftime('%Y-%m-%d %H:%M:%S'),data['Sugar']])
    await state.clear()
    builder = InlineKeyboardMarkup(inline_keyboard=[
      [InlineKeyboardButton(text="–°–¥–µ–ª–∞—Ç—å –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å ‚úèÔ∏è", callback_data="record")],
      [InlineKeyboardButton(text="–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –∑–∞–ø–∏—Å–∏ üìù", callback_data="showall")],
      [InlineKeyboardButton(text="–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é ‚Ü©Ô∏è", callback_data="menu")]
    ])
    await message.answer('ü§ô –ó–∞–ø–∏—Å—å —Å–¥–µ–ª–∞–Ω–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∞–ª—å–Ω–µ–π—à–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup = builder)

@dp.callback_query(F.data=="showall", State(None))
async def create_newnote(call: CallbackQuery, state: FSMContext):
  async with aiosqlite.connect("users.db") as db:
    async with db.execute("SELECT id FROM users WHERE id = ?", (call.from_user.id,)) as cursor:
        if await cursor.fetchone() is None:
          await call.message.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
          return
  builder = InlineKeyboardMarkup(inline_keyboard=[
      [InlineKeyboardButton(text="–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é ‚Ü©Ô∏è", callback_data="menu")]
    ])
#  allnotes=""
#  for note in listuser[call.from_user.id]["Notes"]:
#      allnotes += f"üï∞Ô∏è –í—Ä–µ–º—è: {note[0]}, üìå –£—Ä–æ–≤–µ–Ω—å: {note[1]} (–º–º–æ–ª—å/–ª)\n"

  async with aiosqlite.connect("users.db") as db:
      async with db.execute("SELECT id FROM users WHERE id = ?", (call.from_user.id,)) as cursor:
        await cursor.execute("SELECT note FROM users WHERE id = ?", (call.from_user.id,))
        row = await cursor.fetchone()
        if row:
          note = row[0]
  await call.message.answer('–í–æ—Ç –≤—Å–µ –≤–∞—à–∏ –∑–∞–ø–∏—Å–∏:\n' + note, reply_markup = builder)

@dp.callback_query(F.data=="plan", State(None))
async def create_plan(call: CallbackQuery, state: FSMContext):
   async with aiosqlite.connect("users.db") as db:
    async with db.execute("SELECT id FROM users WHERE id = ?", (call.from_user.id,)) as cursor:
        if await cursor.fetchone() is None:
          await call.message.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
          return
    builder = InlineKeyboardMarkup(inline_keyboard=[
      [InlineKeyboardButton(text="–°–æ—Å—Ç–∞–≤–∏—Ç—å –µ—â—ë –æ–¥–∏–Ω –ø–ª–∞–Ω ü•¶", callback_data="plan")],
      [InlineKeyboardButton(text="–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é ‚Ü©Ô∏è", callback_data="menu")]
    ])

    async with aiosqlite.connect("users.db") as db:
      async with db.execute("SELECT id FROM users WHERE id = ?", (call.from_user.id,)) as cursor:
        await cursor.execute("SELECT id, diabet, likefood FROM users WHERE id = ?", (call.from_user.id,))
        row = await cursor.fetchone()
        if row:
          id, diabet, likefood = row
    if call.from_user.id == id:
      messages.append(HumanMessage(content=f'–†–∞—Å–ø–∏—à–∏ –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è –Ω–∞ –¥–µ–Ω—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –±–æ–ª—å–Ω–æ–≥–æ –¥–∏–∞–±–µ—Ç–æ–º. –£—á–∏—Ç—ã–≤–∞–π, —á—Ç–æ —É –Ω–µ–≥–æ {diabet} —Ç–∏–ø –¥–∏–∞–±–µ—Ç–∞. –¢–∞–∫–∂–µ —É—á–∏—Ç—ã–≤–∞–π –µ–≥–æ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –≤ –µ–¥–µ: {likefood}'))
    else:
      messages.append(HumanMessage(content='–†–∞—Å–ø–∏—à–∏ –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è –Ω–∞ –¥–µ–Ω—å –¥–ª—è –¥–∏–∞–±–µ—Ç–∏–∫–∞. –¢—ã –Ω–µ –∑–Ω–∞–µ—à—å –µ–≥–æ —Ç–∏–ø –¥–∏–∞–±–µ—Ç–∞, –∞ —Ç–∞–∫–∂–µ –Ω–µ –∑–Ω–∞–µ—à—å –µ–≥–æ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π –≤ –µ–¥–µ, –ø–æ—ç—Ç–æ–º—É –ø–∏—à–∏ —á—Ç–æ-—Ç–æ –æ–±—â–µ–µ, —á—Ç–æ –ø–æ–Ω—Ä–∞–≤–∏—Ç—Å—è –º–Ω–æ–≥–∏–º.'))
    res = llm.invoke(messages)
    messages.append(res)
    await call.message.answer(res.content, reply_markup = builder)


@dp.callback_query(F.data=="account", State(None))
async def my_account(call: CallbackQuery, state: FSMContext):
   async with aiosqlite.connect("users.db") as db:
    async with db.execute("SELECT id FROM users WHERE id = ?", (call.from_user.id,)) as cursor:
        if await cursor.fetchone() is None:
          await call.message.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
          return
    builder = InlineKeyboardMarkup(inline_keyboard=[
      [InlineKeyboardButton(text="–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é ‚Ü©Ô∏è", callback_data="menu")]
    ])

    async with aiosqlite.connect('users.db') as db:
      async with db.execute("SELECT id FROM users WHERE id = ?", (call.from_user.id,)) as cursor:
        if await cursor.fetchone() is not None:
          await cursor.execute("SELECT name, age, gender, diabet, likefood FROM users WHERE id = ?", (call.from_user.id,))
          row = await cursor.fetchone()
          if row:
            name, age, gender, diabet, likefood = row
          await call.message.answer(f'–í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞:\n\n' + f'–í–∞—à–µ –∏–º—è: {name}'+f'\n–í–∞—à –≤–æ–∑—Ä–∞—Å—Ç: {age}' + f'\n–í–∞—à –≥–µ–Ω–¥–µ—Ä: {gender}' + f'\n–¢–∏–ø –¥–∏–∞–±–µ—Ç–∞: {diabet}' + f'\n–ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –≤ –µ–¥–µ: {likefood}', reply_markup = builder)
        else:
          await call.message.answer('–í—ã —Å–æ–≤—Å–µ–º –Ω–µ —Ä–∞—Å—Å–∫–∞–∑–∞–ª–∏ –Ω–∏—á–µ–≥–æ –æ —Å–µ–±–µ. –î–∞–≤–∞–π—Ç–µ —ç—Ç–æ –∏—Å–ø—Ä–∞–≤–∏–º!', reply_markup = builder)
#    if call.from_user.id in listuser:
#        await call.message.answer(f'–í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞:\n\n'+f'–í–∞—à–µ –ò–º—è: {listuser[call.from_user.id]["Name"]}'+f'\n–í–∞—à –≤–æ–∑—Ä–∞—Å—Ç: {listuser[call.from_user.id]["Age"]}'+f'\n–í–∞—à –≥–µ–Ω–¥–µ—Ä: {listuser[call.from_user.id]["Gender"]}'+f'\n–°—Ç–µ–ø–µ–Ω—å –¥–∏–∞–±–µ—Ç–∞: {listuser[call.from_user.id]["Diabet"]}'+f'\n–ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –≤ –µ–¥–µ: {listuser[call.from_user.id]["LikeFood"]}', reply_markup = builder)
#    else:
#        await call.message.answer('–í—ã –µ—â–µ –Ω–µ –ø—Ä–æ—à–ª–∏ –∞–Ω–∫–µ—Ç—É, –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç',reply_markup = builder)

@dp.callback_query(F.data=="form", State(None))
async def new_form(call: CallbackQuery, state: FSMContext):
   async with aiosqlite.connect("users.db") as db:
    async with db.execute("SELECT id FROM users WHERE id = ?", (call.from_user.id,)) as cursor:
        if await cursor.fetchone() is None:
          await call.message.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
          return
   await call.message.answer('–û–∫–µ–π! –î–∞–≤–∞–π—Ç–µ –ø–µ—Ä–µ–ø–∏—à–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é –∞–Ω–∫–µ—Ç—É')
   await call.message.answer('‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –í–∞—à–µ –∏–º—è:')
   await state.set_state(Form.name)

@dp.callback_query(F.data=="advice", State(None))
async def give_advice(call: CallbackQuery):
   async with aiosqlite.connect("users.db") as db:
    async with db.execute("SELECT id FROM users WHERE id = ?", (call.from_user.id,)) as cursor:
        if await cursor.fetchone() is None:
          await call.message.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
          return
    builder = InlineKeyboardMarkup(inline_keyboard=[
      [InlineKeyboardButton(text="–ï—â–µ –æ–¥–∏–Ω —Å–æ–≤–µ—Ç üìö", callback_data="advice")],
      [InlineKeyboardButton(text="–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é ‚Ü©Ô∏è", callback_data="menu")]
    ])

    async with aiosqlite.connect("users.db") as db:
      async with db.execute("SELECT id FROM users WHERE id = ?", (call.from_user.id,)) as cursor:
        await cursor.execute("SELECT age, gender, diabet FROM users WHERE id = ?", (call.from_user.id,))
        row = await cursor.fetchone()
        if row:
          age, gender, diabet = row
    messages.append(HumanMessage(content=f'–ù–∞–ø–∏—à–∏ —Å–æ–≤–µ—Ç –¥–ª—è —á–µ–ª–æ–≤–µ–∫–∞, —Å—Ç—Ä–∞–¥–∞—é—â–µ–≥–æ –¥–∏–∞–±–µ—Ç–æ–º. –£—á–∏—Ç—ã–≤–∞–π, —á—Ç–æ —á–µ–ª–æ–≤–µ–∫—É {age} –ª–µ—Ç, —É –Ω–µ–≥–æ {diabet} —Ç–∏–ø –¥–∏–∞–±–µ—Ç–∞ –∏ —É –Ω–µ–≥–æ {gender} –ø–æ–ª. –ù–µ –¥–µ–ª–∞–π —Å–æ–≤–µ—Ç –æ—á–µ–Ω—å –±–æ–ª—å—à–∏–º.'))
    res = llm.invoke(messages)
    messages.append(res)
    await call.message.answer(res.content, reply_markup = builder)

@dp.callback_query(F.data=="menu", State(None))
async def return_menu(call: CallbackQuery):
  async with aiosqlite.connect("users.db") as db:
    async with db.execute("SELECT id FROM users WHERE id = ?", (call.from_user.id,)) as cursor:
        if await cursor.fetchone() is None:
          await call.message.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
          return
    await call.message.answer(menu_starttext, reply_markup=menu)

async def start_bot():
    commands = [BotCommand(command='start', description='–ù–∞—á–∞—Ç—å –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –±–æ—Ç–æ–º'),
                BotCommand(command='help', description='–ü–æ–º–æ—â—å'),
                BotCommand(command='menu', description='–û—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é')]
    await bot.set_my_commands(commands, BotCommandScopeDefault())

async def start_db():
    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö (–µ—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ–Ω –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω)
    async with aiosqlite.connect('users.db') as db:
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        await db.execute('''
            CREATE TABLE IF NOT EXISTS users (
                id INTEGER,
                name STRING,
                age INTEGER,
                gender STRING,
                diabet STRING,
                likefood STRING,
                statusrem INTEGER,
                note STRING,
                chatgpt STRING
            )
        ''')
        await db.commit() # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π

async def main(): #–û—Å–Ω–æ–≤–Ω–∞—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –∑–∞–ø—É—Å–∫–∞—Ç—å—Å—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç–∞.
    #await start_bot()
    #dp.startup.register(start_db)
    scheduler = AsyncIOScheduler(timezone='Europe/Moscow')
    
    job = scheduler.add_job(send_msg, 'interval', seconds=30, args=(dp,))
    
    scheduler.start()
    dp.startup.register(start_db)
    try:
      print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
      await bot.delete_webhook(drop_pending_updates=True)
      await dp.start_polling(bot, allowed_updates=dp.resolve_used_update_types()) #–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ –æ–ø—Ä–æ—Å–∞ (polling). –ë–æ—Ç –Ω–∞—á–∏–Ω–∞–µ—Ç –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ –∑–∞–ø—Ä–∞—à–∏–≤–∞—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–∞ Telegram –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∏—Ö
    finally:
      scheduler.remove_all_jobs()
      await bot.session.close()
      print("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

@dp.message()
async def prtext(message: Message, state: FSMContext):
  async with aiosqlite.connect("users.db") as db:
    async with db.execute("SELECT id FROM users WHERE id = ?", (message.from_user.id,)) as cursor:
        if await cursor.fetchone() is None:
          await message.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
          return
        messages = messages_orig
        async with db.execute("SELECT id FROM users WHERE id = ?", (message.from_user.id,)) as cursor:
            await cursor.execute("SELECT chatgpt FROM users WHERE id = ?", (message.from_user.id,))
            row = await cursor.fetchone()
            if row:
              local = row[0]
              if len(local.split(';'))>0:
                for i in local.split(';'):
                  messages.append(i)
        messages.append(HumanMessage(content=message.text))
        res = llm.invoke(messages)
        messages.append(res)
        async with aiosqlite.connect("users.db") as db:
          data = ""
          for stroke in messages:
            if isinstance(stroke, str):
              data += stroke + ';'
            elif isinstance(stroke, SystemMessage):
              data += stroke.content
            else:
              data += stroke.content + ';'
          await db.execute(f"UPDATE users SET chatgpt = ? WHERE id = ?", (data[:-1], message.from_user.id))
          print(data[:-1])
          await db.commit()
        await message.answer(res.content)

#–ü—Ä–∏–º–µ—Ä —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞ —Å GigaChat
from langchain_core.messages import HumanMessage, SystemMessage
from langchain_gigachat.chat_models import GigaChat

GigaChatKey = '***'

#–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
import requests
import uuid
import json

rq_uid = str(uuid.uuid4())
#URL API, –∫ –∫–æ—Ç–æ—Ä–æ–º—É –º—ã –æ–±—Ä–∞—â–∞–µ–º—Å—è
url = "https://ngw.devices.sberbank.ru:9443/api/v2/oauth"

#–î–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
payload=json.dumps({
    "scope": 'GIGACHAT_API_PERS',
    "model": "GigaChat",
    "temperature": 0.5,
    "top_p": 0.1, #–ö–æ–Ω—Ç—Ä–æ–ª—å —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è –æ—Ç–≤–µ—Ç–æ–≤
    "n": 1, #–ö–æ–ª-–≤–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
    "stream": False, #–ü–æ—Ç–æ–∫–æ–≤–∞—è –ø–µ—Ä–µ–¥–∞—á–∞ –æ—Ç–≤–µ—Ç–∞
    "max_tokens": 512, #–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤ –≤ –æ—Ç–≤–µ—Ç–µ
    "repetition_penalty": 1, #–®—Ç—Ä–∞—Ñ –∑–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è
    "update_interval": 0 #–ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (–¥–ª—è –ø–æ—Ç–æ–∫–æ–≤–æ–π –ø–µ—Ä–µ–¥–∞—á–∏)
})
#–ó–∞–≥–æ–ª–æ–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞
headers = {
    'Content-Type': 'application/x-www-form-urlencoded',
    'Accept': 'application/json',
    'RqUID': rq_uid,
    'Authorization': f'Basic {GigaChatKey}'
}

response = requests.request("POST", url, headers=headers, data=payload, verify=False) # verify=False –û—Ç–∫–ª—é—á–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞–ª–∏—á–∏—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤ –ù–£–¶ –ú–∏–Ω—Ü–∏—Ñ—Ä—ã
#giga_token = response.json()['access_token']

llm = GigaChat(
    credentials=GigaChatKey,
    scope="GIGACHAT_API_PERS",
    model="GigaChat",
    verify_ssl_certs=False, # –û—Ç–∫–ª—é—á–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞–ª–∏—á–∏—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤ –ù–£–¶ –ú–∏–Ω—Ü–∏—Ñ—Ä—ãffff
    streaming=False,
)

messages=[]
messages_orig = [
    SystemMessage(
        content="–¢—ã ‚Äî –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç-–¥–∏–∞–±–µ—Ç–æ–ª–æ–≥ —Å –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–º –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–æ–º, —Å–æ–∑–¥–∞–Ω–Ω—ã–π –¥–ª—è –ø–æ–º–æ—â–∏ –ª—é–¥—è–º —Å –¥–∏–∞–±–µ—Ç–æ–º. –¢–≤–æ—è –æ—Å–Ω–æ–≤–Ω–∞—è –∑–∞–¥–∞—á–∞ ‚Äî –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∏ –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, —Å–≤—è–∑–∞–Ω–Ω—É—é —Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º —ç—Ç–∏–º –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏–µ–º. –¢—ã –º–æ–∂–µ—à—å –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ —Ç–∏–ø–∞—Ö –¥–∏–∞–±–µ—Ç–∞, –µ–≥–æ —Å–∏–º–ø—Ç–æ–º–∞—Ö, –º–µ—Ç–æ–¥–∞—Ö –ª–µ—á–µ–Ω–∏—è –∏ —Å–ø–æ—Å–æ–±–∞—Ö –∫–æ–Ω—Ç—Ä–æ–ª—è —É—Ä–æ–≤–Ω—è —Å–∞—Ö–∞—Ä–∞ –≤ –∫—Ä–æ–≤–∏. –¢–∞–∫–∂–µ —Ç—ã –º–æ–∂–µ—à—å –ø–æ–º–æ—á—å —Å–æ—Å—Ç–∞–≤–∏—Ç—å –¥–∏–µ—Ç–∏—á–µ—Å–∫–∏–π –ø–ª–∞–Ω –Ω–∞ –¥–µ–Ω—å, —É—á–∏—Ç—ã–≤–∞—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, —Ç–∞–∫–∏–µ –∫–∞–∫ –≤–æ–∑—Ä–∞—Å—Ç, –ø–æ–ª, —Ç–∏–ø –¥–∏–∞–±–µ—Ç–∞, —É—Ä–æ–≤–µ–Ω—å —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏, –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –≤ –ø–∏—Ç–∞–Ω–∏–∏ –∏ –Ω–∞–ª–∏—á–∏–µ –∞–ª–ª–µ—Ä–≥–∏–π. –¢–≤–æ–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –≤–∫–ª—é—á–∞—é—Ç —Å–æ–≤–µ—Ç—ã –ø–æ –≤—ã–±–æ—Ä—É –ø—Ä–æ–¥—É–∫—Ç–æ–≤, –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–µ –º–∞–∫—Ä–æ—ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏ –ø–æ–ª–µ–∑–Ω—ã–º –ø—Ä–∏–≤—ã—á–∫–∞–º, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥–∞—é—Ç –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –∑–¥–æ—Ä–æ–≤—å–µ. –¢—ã —É–∑–∫–æ—Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∏ –æ—Ç–≤–µ—á–∞–µ—à—å —Ç–æ–ª—å–∫–æ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –¥–∏–∞–±–µ—Ç–æ–º, –≤–µ–∂–ª–∏–≤–æ –æ—Ç–∫–ª–æ–Ω—è—è –ª—é–±—ã–µ –∑–∞–ø—Ä–æ—Å—ã, –Ω–µ –æ—Ç–Ω–æ—Å—è—â–∏–µ—Å—è –∫ —Å–≤–æ–µ–π —Ç–µ–º–µ. –¢—ã —Å—Ç–∞—Ä–∞–µ—à—å—Å—è –æ–±—ä—è—Å–Ω—è—Ç—å —Å–ª–æ–∂–Ω—ã–µ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏ –ø—Ä–æ—Å—Ç—ã–º –∏ –ø–æ–Ω—è—Ç–Ω—ã–º —è–∑—ã–∫–æ–º. –ò–º–µ–π –≤ –≤–∏–¥—É, —á—Ç–æ —Ç—ã –Ω–µ –∑–∞–º–µ–Ω—è–µ—à—å –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—É—é –º–µ–¥–∏—Ü–∏–Ω—Å–∫—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é, –Ω–æ –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å –ª—É—á—à–µ –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä–æ–≤–∞—Ç—å –¥–∏–∞–±–µ—Ç –∏ —É–ª—É—á—à–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ –∂–∏–∑–Ω–∏"
    )
]

await main()
#asyncio.run(main())

# while(True):
#     user_input = input("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ")
#     if user_input == "–ø–æ–∫–∞":
#       break
#     messages.append(HumanMessage(content=user_input))
#     res = llm.invoke(messages)
#     messages.append(res)
#     print("GigaChat: ", res.content)
